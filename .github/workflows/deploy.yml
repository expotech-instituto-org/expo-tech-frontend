name: Deploy Frontend (Blue-Green)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DEPLOY_PATH: /home/expo_tech/frontend

    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Hub (runner)
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Docker Images
        run: |
          IMAGE_BASE="${{ secrets.DOCKERHUB_USERNAME }}/expo_tech_front"
          docker build -t "${IMAGE_BASE}:blue" .
          docker push "${IMAGE_BASE}:blue"
          docker build -t "${IMAGE_BASE}:green" .
          docker push "${IMAGE_BASE}:green"

      - name: Copy Compose & Nginx to VM
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: 22
          source: "docker-compose.yml,nginx/nginx.conf"
          target: "${{ env.DEPLOY_PATH }}"

      - name: SSH Deploy Blue-Green (remote)
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: 22
          script_stop: true
          script: |
            set -e

            DEPLOY_PATH=/home/expo_tech/frontend
            IMAGE_BLUE="${{ secrets.DOCKERHUB_USERNAME }}/expo_tech_front:blue"
            IMAGE_GREEN="${{ secrets.DOCKERHUB_USERNAME }}/expo_tech_front:green"
            DOCKER_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
            DOCKER_PASSWORD="${{ secrets.DOCKERHUB_TOKEN }}"

            echo "=== üöÄ Iniciando deploy Blue-Green ==="
            cd $DEPLOY_PATH

            echo "=> Login no Docker Hub"
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin || true

            echo "=> Pull das imagens"
            docker pull "$IMAGE_BLUE"
            docker pull "$IMAGE_GREEN"

            echo "=> Limpando containers antigos"
            docker rm -f frontend-green-temp || true

            echo "=> Detectando network do proxy..."
            set +e
            NETWORK=$(docker inspect --format='{{range $k,$v := .NetworkSettings.Networks}}{{$k}}{{end}}' frontend-proxy 2>/dev/null)
            NETWORK_STATUS=$?
            set -e

            if [ $NETWORK_STATUS -ne 0 ] || [ -z "$NETWORK" ]; then
              echo "‚ö†Ô∏è  N√£o foi poss√≠vel detectar a network do frontend-proxy."
              echo "üîé  Verificando se o container proxy existe..."
              docker ps -a | grep frontend-proxy || echo "‚ùå  frontend-proxy n√£o est√° em execu√ß√£o!"
              NETWORK_ARG=""
            else
              echo "=> Usando network '$NETWORK'"
              NETWORK_ARG="--network $NETWORK"
            fi

            echo "=> Verificando se a porta 3001 est√° livre..."
            if docker ps --format '{{.Ports}}' | grep -q '3001->'; then
              echo "‚ö†Ô∏è Porta 3001 j√° em uso ‚Äî liberando..."
              docker ps --format '{{.Names}} {{.Ports}}' | grep '3001->' | awk '{print $1}' | xargs -r docker rm -f
            fi

            echo "=> Subindo container tempor√°rio (frontend-green-temp)"
            if ! docker run -d --name frontend-green-temp $NETWORK_ARG -p 3001:3000 "$IMAGE_GREEN"; then
              echo "‚ùå Falha ao criar container frontend-green-temp"
              docker logs frontend-green-temp || true
              exit 1
            fi

            sleep 5

            echo "=> Validando se o container est√° rodando..."
            if [ "$(docker ps -q -f name=frontend-green-temp)" = "" ]; then
              echo "‚ùå O container frontend-green-temp n√£o est√° em execu√ß√£o!"
              docker logs frontend-green-temp || true
              exit 1
            fi

            echo "=> Iniciando healthcheck..."
            ATTEMPTS=0
            MAX_ATTEMPTS=10
            HEALTHY=false
            while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
              STATUS=$(docker exec frontend-green-temp sh -c "curl -s -o /dev/null -w '%{http_code}' http://localhost:3000/health" || true)
              echo "Tentativa $((ATTEMPTS+1))/$MAX_ATTEMPTS - Status: ${STATUS:-N/A}"
              if [ "$STATUS" = "200" ]; then
                HEALTHY=true
                break
              fi
              ATTEMPTS=$((ATTEMPTS+1))
              sleep 3
            done

            if [ "$HEALTHY" != true ]; then
              echo "‚ùå Healthcheck falhou! Mantendo vers√£o antiga."
              docker logs frontend-green-temp || true
              docker rm -f frontend-green-temp || true
              exit 1
            fi

            echo "‚úÖ Healthcheck OK ‚Äî promovendo para produ√ß√£o"

            echo "=> Parando e removendo vers√£o anterior"
            docker stop frontend-blue || true
            docker rm frontend-blue || true

            echo "=> Renomeando container novo para frontend-blue"
            docker rename frontend-green-temp frontend-blue

            echo "=> Recarregando Nginx"
            docker exec frontend-proxy nginx -s reload || echo "‚ö†Ô∏è Falha ao recarregar Nginx"

            echo "‚úÖ Deploy conclu√≠do com sucesso!"
