name: Deploy Frontend (Zero Downtime)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DEPLOY_PATH: /home/expo_tech/frontend

    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Images
        run: |
          IMAGE_BLUE=${{ secrets.DOCKERHUB_USERNAME }}/expo_tech_front:blue
          IMAGE_GREEN=${{ secrets.DOCKERHUB_USERNAME }}/expo_tech_front:green

          docker build --pull --no-cache -t $IMAGE_BLUE .
          docker push $IMAGE_BLUE
          docker build --pull --no-cache -t $IMAGE_GREEN .
          docker push $IMAGE_GREEN

      - name: Copy deploy files to VM
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: 22
          source: "docker-compose.yml,nginx/nginx.conf"
          target: "${{ env.DEPLOY_PATH }}"

      - name: SSH and Deploy (Blue-Green)
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: 22
          script_stop: true
          script: |
            set -e
            cd /home/expo_tech/frontend

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            # Instala plugin docker compose se necessário
            if ! command -v docker compose &> /dev/null; then
              sudo apt-get update -y
              sudo apt-get install -y docker-compose-plugin
            fi

            IMAGE_BLUE="${{ secrets.DOCKERHUB_USERNAME }}/expo_tech_front:blue"
            IMAGE_GREEN="${{ secrets.DOCKERHUB_USERNAME }}/expo_tech_front:green"

            echo "==> Limpando containers antigos travados..."
            docker rm -f frontend-green || true

            echo "==> Pull das novas imagens..."
            docker pull $IMAGE_BLUE
            docker pull $IMAGE_GREEN

            echo "==> Subindo nova versão (green)..."
            docker compose -f docker-compose.yml up -d frontend-green frontend-proxy

            echo "==> Verificando healthcheck..."
            ATTEMPTS=0
            MAX_ATTEMPTS=10
            HEALTHY=false

            while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
              STATUS=$(docker exec frontend-green curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/health || true)
              if [ "$STATUS" = "200" ]; then
                echo "✅ frontend-green está saudável!"
                HEALTHY=true
                break
              fi
              ATTEMPTS=$((ATTEMPTS+1))
              echo "Tentativa $ATTEMPTS/$MAX_ATTEMPTS - Status $STATUS"
              sleep 3
            done

            if [ "$HEALTHY" != true ]; then
              echo "❌ Healthcheck falhou! Mantendo versão antiga."
              docker compose -f docker-compose.yml rm -sf frontend-green || true
              exit 1
            fi

            echo "==> Healthcheck OK — promovendo green → blue..."
            docker stop frontend-blue || true
            docker rm frontend-blue || true
            docker rename frontend-green frontend-blue

            echo "==> Recarregando Nginx..."
            docker exec frontend-proxy nginx -s reload || echo "⚠️ Falha ao recarregar Nginx"

            echo "✅ Deploy concluído com sucesso!"
