name: Deploy Frontend (Blue-Green)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DEPLOY_PATH: /home/expo_tech/frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub (runner)
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Docker Images
        run: |
          IMAGE_BASE="${{ secrets.DOCKERHUB_USERNAME }}/expo_tech_front"
          echo "Build & Push das imagens blue e green"
          docker build -t "${IMAGE_BASE}:blue" .
          docker push "${IMAGE_BASE}:blue"
          docker build -t "${IMAGE_BASE}:green" .
          docker push "${IMAGE_BASE}:green"

      - name: Copy Compose & Nginx to VM
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: 22
          source: "docker-compose.yml,nginx/nginx.conf"
          target: "${{ env.DEPLOY_PATH }}"

      - name: Ensure proxy is running on VM
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: 22
          script_stop: true
          script: |
            set -e
            DEPLOY_PATH=${{ env.DEPLOY_PATH }}
            cd $DEPLOY_PATH

            echo "Criando rede (se não existir)"
            docker network create frontend_net >/dev/null 2>&1 || true

            echo "Removendo container antigo de proxy (se existir)"
            docker rm -f frontend-proxy >/dev/null 2>&1 || true

            echo "Subindo containers via docker compose"
            if docker compose version >/dev/null 2>&1; then
              docker compose -f docker-compose.yml up -d
            elif command -v docker-compose >/dev/null 2>&1; then
              docker-compose -f docker-compose.yml up -d
            else
              echo "docker compose não encontrado no host"
              exit 1
            fi

      - name: SSH Deploy Blue-Green (remote)
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: 22
          script_stop: true
          script: |
            set -e

            DEPLOY_PATH=${{ env.DEPLOY_PATH }}
            IMAGE_BLUE="${{ secrets.DOCKERHUB_USERNAME }}/expo_tech_front:blue"
            IMAGE_GREEN="${{ secrets.DOCKERHUB_USERNAME }}/expo_tech_front:green"
            DOCKER_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
            DOCKER_PASSWORD="${{ secrets.DOCKERHUB_TOKEN }}"
            NETWORK="frontend_net"

            echo "=== Iniciando deploy Blue-Green ==="
            cd $DEPLOY_PATH

            echo "Garantindo rede existente"
            docker network create $NETWORK >/dev/null 2>&1 || true

            echo "Login no Docker Hub"
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin || true

            echo "Pull das imagens"
            docker pull "$IMAGE_BLUE"
            docker pull "$IMAGE_GREEN"

            echo "Limpando containers antigos temporários"
            docker rm -f frontend-green-temp >/dev/null 2>&1 || true

            echo "Subindo novo container (frontend-green-temp)"
            docker run -d --name frontend-green-temp --network $NETWORK "$IMAGE_GREEN"

            sleep 5

            echo "Verificando se está rodando..."
            if [ "$(docker ps -q -f name=frontend-green-temp)" = "" ]; then
              echo "O container frontend-green-temp não iniciou corretamente!"
              docker logs frontend-green-temp || true
              exit 1
            fi

            echo "Healthcheck via curl..."
            ATTEMPTS=0
            MAX_ATTEMPTS=10
            HEALTHY=false

            while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
              HTTP_CODE=$(docker run --rm --network "$NETWORK" curlimages/curl:latest -s -o /dev/null -w "%{http_code}" "http://frontend-green-temp:4444/" || echo "000")
              echo "Tentativa $((ATTEMPTS+1))/$MAX_ATTEMPTS - HTTP $HTTP_CODE"
              if [ "$HTTP_CODE" = "200" ]; then
                HEALTHY=true
                break
              fi
              ATTEMPTS=$((ATTEMPTS+1))
              sleep 3
            done

            if [ "$HEALTHY" != true ]; then
              echo "Healthcheck falhou — revertendo para versão anterior."
              docker logs frontend-green-temp --tail 200 || true
              docker rm -f frontend-green-temp || true
              exit 1
            fi

            echo "Healthcheck OK — promovendo versão nova"
            docker stop frontend-blue >/dev/null 2>&1 || true
            docker rm frontend-blue >/dev/null 2>&1 || true
            docker rename frontend-green-temp frontend-blue

            echo "Recarregando Nginx"
            docker exec frontend-proxy nginx -s reload || echo "Falha ao recarregar Nginx"

            echo "Deploy concluído com sucesso!"
