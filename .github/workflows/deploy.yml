name: Deploy Frontend (Zero Downtime)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DEPLOY_PATH: /home/expo_tech/frontend
      IMAGE_BLUE: ${{ secrets.DOCKERHUB_USERNAME }}/expo_tech_front:blue
      IMAGE_GREEN: ${{ secrets.DOCKERHUB_USERNAME }}/expo_tech_front:green

    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Images
        run: |
          docker build --pull --no-cache -t $IMAGE_BLUE .
          docker push $IMAGE_BLUE
          docker build --pull --no-cache -t $IMAGE_GREEN .
          docker push $IMAGE_GREEN

      - name: Copy deploy files to VM
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: 22
          source: "docker-compose.yml,nginx/nginx.conf"
          target: "${{ env.DEPLOY_PATH }}"

      - name: SSH and Deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: 22
          script_stop: true

          envs: |
            DEPLOY_PATH=/home/expo_tech/frontend
            IMAGE_BLUE=${{ secrets.DOCKERHUB_USERNAME }}/expo_tech_front:blue
            IMAGE_GREEN=${{ secrets.DOCKERHUB_USERNAME }}/expo_tech_front:green

          script: |
            set -e
            cd $DEPLOY_PATH

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            # Instala plugin do docker compose se não existir
            if ! command -v docker compose &> /dev/null; then
              sudo apt-get update -y
              sudo apt-get install -y docker-compose-plugin
            fi

            echo "Pulling images..."
            echo "IMAGE_BLUE=$IMAGE_BLUE"
            echo "IMAGE_GREEN=$IMAGE_GREEN"

            docker pull $IMAGE_BLUE
            docker pull $IMAGE_GREEN

            echo "Subindo containers..."
            docker compose -f docker-compose.yml up -d frontend-green frontend-proxy

            echo "Removendo versão antiga..."
            docker compose -f docker-compose.yml rm -sf frontend-blue || true

            echo "Promovendo versão green para blue..."
            docker rename frontend-green frontend-blue || true

            echo "Recarregando Nginx..."
            docker exec frontend-proxy nginx -s reload || echo "Nginx reload falhou"

            echo "Deploy concluído com sucesso ✅"
