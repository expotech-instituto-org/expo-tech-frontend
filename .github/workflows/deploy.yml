name: Deploy Frontend (Blue-Green)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DEPLOY_PATH: /home/expo_tech/frontend
      IMAGE_BLUE: ${{ secrets.DOCKERHUB_USERNAME }}/expo_tech_front:blue
      IMAGE_GREEN: ${{ secrets.DOCKERHUB_USERNAME }}/expo_tech_front:green
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Docker Images
        run: |
          docker build -t $IMAGE_BLUE .
          docker push $IMAGE_BLUE
          docker build -t $IMAGE_GREEN .
          docker push $IMAGE_GREEN

      - name: Copy Compose & Nginx to VM
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: 22
          source: "docker-compose.yml,nginx/nginx.conf"
          target: "${{ env.DEPLOY_PATH }}"

      - name: SSH Deploy Blue-Green
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: 22
          script_stop: true
          envs: |
            DEPLOY_PATH=${{ env.DEPLOY_PATH }}
            IMAGE_BLUE=${{ env.IMAGE_BLUE }}
            IMAGE_GREEN=${{ env.IMAGE_GREEN }}
            DOCKERHUB_USERNAME=${{ env.DOCKERHUB_USERNAME }}
            DOCKERHUB_TOKEN=${{ env.DOCKERHUB_TOKEN }}
          script: |
            set -e
            cd $DEPLOY_PATH

            # Docker login
            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

            # Pull das imagens
            docker pull $IMAGE_BLUE
            docker pull $IMAGE_GREEN

            # Limpa Green temporário se existir
            docker rm -f frontend-green-temp || true

            # Sobe Green temporário
            docker run -d --name frontend-green-temp -p 3001:3000 $IMAGE_GREEN

            # Healthcheck
            ATTEMPTS=0
            MAX_ATTEMPTS=10
            HEALTHY=false
            while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
              STATUS=$(docker exec frontend-green-temp curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/health || true)
              if [ "$STATUS" = "200" ]; then
                HEALTHY=true
                break
              fi
              ATTEMPTS=$((ATTEMPTS+1))
              echo "Tentativa $ATTEMPTS/$MAX_ATTEMPTS - Status $STATUS"
              sleep 3
            done

            if [ "$HEALTHY" != true ]; then
              echo "❌ Healthcheck falhou! Mantendo versão antiga."
              docker rm -f frontend-green-temp || true
              exit 1
            fi

            # Swap Green → Blue
            docker stop frontend-blue || true
            docker rm frontend-blue || true
            docker rename frontend-green-temp frontend-blue

            # Recarrega Nginx
            docker exec frontend-proxy nginx -s reload || echo "⚠️ Falha ao recarregar Nginx"

            echo "✅ Deploy concluído com sucesso!"
